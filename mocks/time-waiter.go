// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"
	timea "time"

	"github.com/bborbe/time"
)

type TimeWaiter struct {
	WaitUntilStub        func(context.Context, timea.Time) error
	waitUntilMutex       sync.RWMutex
	waitUntilArgsForCall []struct {
		arg1 context.Context
		arg2 timea.Time
	}
	waitUntilReturns struct {
		result1 error
	}
	waitUntilReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TimeWaiter) WaitUntil(arg1 context.Context, arg2 timea.Time) error {
	fake.waitUntilMutex.Lock()
	ret, specificReturn := fake.waitUntilReturnsOnCall[len(fake.waitUntilArgsForCall)]
	fake.waitUntilArgsForCall = append(fake.waitUntilArgsForCall, struct {
		arg1 context.Context
		arg2 timea.Time
	}{arg1, arg2})
	stub := fake.WaitUntilStub
	fakeReturns := fake.waitUntilReturns
	fake.recordInvocation("WaitUntil", []interface{}{arg1, arg2})
	fake.waitUntilMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TimeWaiter) WaitUntilCallCount() int {
	fake.waitUntilMutex.RLock()
	defer fake.waitUntilMutex.RUnlock()
	return len(fake.waitUntilArgsForCall)
}

func (fake *TimeWaiter) WaitUntilCalls(stub func(context.Context, timea.Time) error) {
	fake.waitUntilMutex.Lock()
	defer fake.waitUntilMutex.Unlock()
	fake.WaitUntilStub = stub
}

func (fake *TimeWaiter) WaitUntilArgsForCall(i int) (context.Context, timea.Time) {
	fake.waitUntilMutex.RLock()
	defer fake.waitUntilMutex.RUnlock()
	argsForCall := fake.waitUntilArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TimeWaiter) WaitUntilReturns(result1 error) {
	fake.waitUntilMutex.Lock()
	defer fake.waitUntilMutex.Unlock()
	fake.WaitUntilStub = nil
	fake.waitUntilReturns = struct {
		result1 error
	}{result1}
}

func (fake *TimeWaiter) WaitUntilReturnsOnCall(i int, result1 error) {
	fake.waitUntilMutex.Lock()
	defer fake.waitUntilMutex.Unlock()
	fake.WaitUntilStub = nil
	if fake.waitUntilReturnsOnCall == nil {
		fake.waitUntilReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TimeWaiter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.waitUntilMutex.RLock()
	defer fake.waitUntilMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TimeWaiter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ time.Waiter = new(TimeWaiter)
