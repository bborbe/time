// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	timea "time"

	"github.com/bborbe/time"
)

type HasTime struct {
	TimeStub        func() timea.Time
	timeMutex       sync.RWMutex
	timeArgsForCall []struct {
	}
	timeReturns struct {
		result1 timea.Time
	}
	timeReturnsOnCall map[int]struct {
		result1 timea.Time
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HasTime) Time() timea.Time {
	fake.timeMutex.Lock()
	ret, specificReturn := fake.timeReturnsOnCall[len(fake.timeArgsForCall)]
	fake.timeArgsForCall = append(fake.timeArgsForCall, struct {
	}{})
	stub := fake.TimeStub
	fakeReturns := fake.timeReturns
	fake.recordInvocation("Time", []interface{}{})
	fake.timeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HasTime) TimeCallCount() int {
	fake.timeMutex.RLock()
	defer fake.timeMutex.RUnlock()
	return len(fake.timeArgsForCall)
}

func (fake *HasTime) TimeCalls(stub func() timea.Time) {
	fake.timeMutex.Lock()
	defer fake.timeMutex.Unlock()
	fake.TimeStub = stub
}

func (fake *HasTime) TimeReturns(result1 timea.Time) {
	fake.timeMutex.Lock()
	defer fake.timeMutex.Unlock()
	fake.TimeStub = nil
	fake.timeReturns = struct {
		result1 timea.Time
	}{result1}
}

func (fake *HasTime) TimeReturnsOnCall(i int, result1 timea.Time) {
	fake.timeMutex.Lock()
	defer fake.timeMutex.Unlock()
	fake.TimeStub = nil
	if fake.timeReturnsOnCall == nil {
		fake.timeReturnsOnCall = make(map[int]struct {
			result1 timea.Time
		})
	}
	fake.timeReturnsOnCall[i] = struct {
		result1 timea.Time
	}{result1}
}

func (fake *HasTime) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HasTime) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ time.HasTime = new(HasTime)
