// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	timea "time"

	"github.com/bborbe/time"
)

type CurrentTimeSetter struct {
	SetNowStub        func(timea.Time)
	setNowMutex       sync.RWMutex
	setNowArgsForCall []struct {
		arg1 timea.Time
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CurrentTimeSetter) SetNow(arg1 timea.Time) {
	fake.setNowMutex.Lock()
	fake.setNowArgsForCall = append(fake.setNowArgsForCall, struct {
		arg1 timea.Time
	}{arg1})
	stub := fake.SetNowStub
	fake.recordInvocation("SetNow", []interface{}{arg1})
	fake.setNowMutex.Unlock()
	if stub != nil {
		fake.SetNowStub(arg1)
	}
}

func (fake *CurrentTimeSetter) SetNowCallCount() int {
	fake.setNowMutex.RLock()
	defer fake.setNowMutex.RUnlock()
	return len(fake.setNowArgsForCall)
}

func (fake *CurrentTimeSetter) SetNowCalls(stub func(timea.Time)) {
	fake.setNowMutex.Lock()
	defer fake.setNowMutex.Unlock()
	fake.SetNowStub = stub
}

func (fake *CurrentTimeSetter) SetNowArgsForCall(i int) timea.Time {
	fake.setNowMutex.RLock()
	defer fake.setNowMutex.RUnlock()
	argsForCall := fake.setNowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CurrentTimeSetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CurrentTimeSetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ time.CurrentTimeSetter = new(CurrentTimeSetter)
