// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	timea "time"

	"github.com/bborbe/time"
)

type HasDuration struct {
	DurationStub        func() timea.Duration
	durationMutex       sync.RWMutex
	durationArgsForCall []struct {
	}
	durationReturns struct {
		result1 timea.Duration
	}
	durationReturnsOnCall map[int]struct {
		result1 timea.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *HasDuration) Duration() timea.Duration {
	fake.durationMutex.Lock()
	ret, specificReturn := fake.durationReturnsOnCall[len(fake.durationArgsForCall)]
	fake.durationArgsForCall = append(fake.durationArgsForCall, struct {
	}{})
	stub := fake.DurationStub
	fakeReturns := fake.durationReturns
	fake.recordInvocation("Duration", []interface{}{})
	fake.durationMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *HasDuration) DurationCallCount() int {
	fake.durationMutex.RLock()
	defer fake.durationMutex.RUnlock()
	return len(fake.durationArgsForCall)
}

func (fake *HasDuration) DurationCalls(stub func() timea.Duration) {
	fake.durationMutex.Lock()
	defer fake.durationMutex.Unlock()
	fake.DurationStub = stub
}

func (fake *HasDuration) DurationReturns(result1 timea.Duration) {
	fake.durationMutex.Lock()
	defer fake.durationMutex.Unlock()
	fake.DurationStub = nil
	fake.durationReturns = struct {
		result1 timea.Duration
	}{result1}
}

func (fake *HasDuration) DurationReturnsOnCall(i int, result1 timea.Duration) {
	fake.durationMutex.Lock()
	defer fake.durationMutex.Unlock()
	fake.DurationStub = nil
	if fake.durationReturnsOnCall == nil {
		fake.durationReturnsOnCall = make(map[int]struct {
			result1 timea.Duration
		})
	}
	fake.durationReturnsOnCall[i] = struct {
		result1 timea.Duration
	}{result1}
}

func (fake *HasDuration) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *HasDuration) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ time.HasDuration = new(HasDuration)
